/*
 * Fly Machines API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApiHTTPOptions;
import org.openapitools.client.model.ApiProxyProtoOptions;
import org.openapitools.client.model.ApiTLSOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiMachinePort
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-31T17:25:53.139932930Z[Europe/London]")
public class ApiMachinePort {
  public static final String SERIALIZED_NAME_END_PORT = "end_port";
  @SerializedName(SERIALIZED_NAME_END_PORT)
  private Integer endPort;

  public static final String SERIALIZED_NAME_FORCE_HTTPS = "force_https";
  @SerializedName(SERIALIZED_NAME_FORCE_HTTPS)
  private Boolean forceHttps;

  public static final String SERIALIZED_NAME_HANDLERS = "handlers";
  @SerializedName(SERIALIZED_NAME_HANDLERS)
  private List<String> handlers;

  public static final String SERIALIZED_NAME_HTTP_OPTIONS = "http_options";
  @SerializedName(SERIALIZED_NAME_HTTP_OPTIONS)
  private ApiHTTPOptions httpOptions;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PROXY_PROTO_OPTIONS = "proxy_proto_options";
  @SerializedName(SERIALIZED_NAME_PROXY_PROTO_OPTIONS)
  private ApiProxyProtoOptions proxyProtoOptions;

  public static final String SERIALIZED_NAME_START_PORT = "start_port";
  @SerializedName(SERIALIZED_NAME_START_PORT)
  private Integer startPort;

  public static final String SERIALIZED_NAME_TLS_OPTIONS = "tls_options";
  @SerializedName(SERIALIZED_NAME_TLS_OPTIONS)
  private ApiTLSOptions tlsOptions;

  public ApiMachinePort() {
  }

  public ApiMachinePort endPort(Integer endPort) {
    this.endPort = endPort;
    return this;
  }

   /**
   * Get endPort
   * @return endPort
  **/
  @javax.annotation.Nullable
  public Integer getEndPort() {
    return endPort;
  }

  public void setEndPort(Integer endPort) {
    this.endPort = endPort;
  }


  public ApiMachinePort forceHttps(Boolean forceHttps) {
    this.forceHttps = forceHttps;
    return this;
  }

   /**
   * Get forceHttps
   * @return forceHttps
  **/
  @javax.annotation.Nullable
  public Boolean getForceHttps() {
    return forceHttps;
  }

  public void setForceHttps(Boolean forceHttps) {
    this.forceHttps = forceHttps;
  }


  public ApiMachinePort handlers(List<String> handlers) {
    this.handlers = handlers;
    return this;
  }

  public ApiMachinePort addHandlersItem(String handlersItem) {
    if (this.handlers == null) {
      this.handlers = new ArrayList<>();
    }
    this.handlers.add(handlersItem);
    return this;
  }

   /**
   * Get handlers
   * @return handlers
  **/
  @javax.annotation.Nullable
  public List<String> getHandlers() {
    return handlers;
  }

  public void setHandlers(List<String> handlers) {
    this.handlers = handlers;
  }


  public ApiMachinePort httpOptions(ApiHTTPOptions httpOptions) {
    this.httpOptions = httpOptions;
    return this;
  }

   /**
   * Get httpOptions
   * @return httpOptions
  **/
  @javax.annotation.Nullable
  public ApiHTTPOptions getHttpOptions() {
    return httpOptions;
  }

  public void setHttpOptions(ApiHTTPOptions httpOptions) {
    this.httpOptions = httpOptions;
  }


  public ApiMachinePort port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public ApiMachinePort proxyProtoOptions(ApiProxyProtoOptions proxyProtoOptions) {
    this.proxyProtoOptions = proxyProtoOptions;
    return this;
  }

   /**
   * Get proxyProtoOptions
   * @return proxyProtoOptions
  **/
  @javax.annotation.Nullable
  public ApiProxyProtoOptions getProxyProtoOptions() {
    return proxyProtoOptions;
  }

  public void setProxyProtoOptions(ApiProxyProtoOptions proxyProtoOptions) {
    this.proxyProtoOptions = proxyProtoOptions;
  }


  public ApiMachinePort startPort(Integer startPort) {
    this.startPort = startPort;
    return this;
  }

   /**
   * Get startPort
   * @return startPort
  **/
  @javax.annotation.Nullable
  public Integer getStartPort() {
    return startPort;
  }

  public void setStartPort(Integer startPort) {
    this.startPort = startPort;
  }


  public ApiMachinePort tlsOptions(ApiTLSOptions tlsOptions) {
    this.tlsOptions = tlsOptions;
    return this;
  }

   /**
   * Get tlsOptions
   * @return tlsOptions
  **/
  @javax.annotation.Nullable
  public ApiTLSOptions getTlsOptions() {
    return tlsOptions;
  }

  public void setTlsOptions(ApiTLSOptions tlsOptions) {
    this.tlsOptions = tlsOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiMachinePort apiMachinePort = (ApiMachinePort) o;
    return Objects.equals(this.endPort, apiMachinePort.endPort) &&
        Objects.equals(this.forceHttps, apiMachinePort.forceHttps) &&
        Objects.equals(this.handlers, apiMachinePort.handlers) &&
        Objects.equals(this.httpOptions, apiMachinePort.httpOptions) &&
        Objects.equals(this.port, apiMachinePort.port) &&
        Objects.equals(this.proxyProtoOptions, apiMachinePort.proxyProtoOptions) &&
        Objects.equals(this.startPort, apiMachinePort.startPort) &&
        Objects.equals(this.tlsOptions, apiMachinePort.tlsOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endPort, forceHttps, handlers, httpOptions, port, proxyProtoOptions, startPort, tlsOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiMachinePort {\n");
    sb.append("    endPort: ").append(toIndentedString(endPort)).append("\n");
    sb.append("    forceHttps: ").append(toIndentedString(forceHttps)).append("\n");
    sb.append("    handlers: ").append(toIndentedString(handlers)).append("\n");
    sb.append("    httpOptions: ").append(toIndentedString(httpOptions)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    proxyProtoOptions: ").append(toIndentedString(proxyProtoOptions)).append("\n");
    sb.append("    startPort: ").append(toIndentedString(startPort)).append("\n");
    sb.append("    tlsOptions: ").append(toIndentedString(tlsOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("end_port");
    openapiFields.add("force_https");
    openapiFields.add("handlers");
    openapiFields.add("http_options");
    openapiFields.add("port");
    openapiFields.add("proxy_proto_options");
    openapiFields.add("start_port");
    openapiFields.add("tls_options");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiMachinePort
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiMachinePort.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiMachinePort is not found in the empty JSON string", ApiMachinePort.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiMachinePort.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiMachinePort` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("handlers") != null && !jsonObj.get("handlers").isJsonNull() && !jsonObj.get("handlers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `handlers` to be an array in the JSON string but got `%s`", jsonObj.get("handlers").toString()));
      }
      // validate the optional field `http_options`
      if (jsonObj.get("http_options") != null && !jsonObj.get("http_options").isJsonNull()) {
        ApiHTTPOptions.validateJsonElement(jsonObj.get("http_options"));
      }
      // validate the optional field `proxy_proto_options`
      if (jsonObj.get("proxy_proto_options") != null && !jsonObj.get("proxy_proto_options").isJsonNull()) {
        ApiProxyProtoOptions.validateJsonElement(jsonObj.get("proxy_proto_options"));
      }
      // validate the optional field `tls_options`
      if (jsonObj.get("tls_options") != null && !jsonObj.get("tls_options").isJsonNull()) {
        ApiTLSOptions.validateJsonElement(jsonObj.get("tls_options"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiMachinePort.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiMachinePort' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiMachinePort> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiMachinePort.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiMachinePort>() {
           @Override
           public void write(JsonWriter out, ApiMachinePort value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiMachinePort read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiMachinePort given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiMachinePort
  * @throws IOException if the JSON string is invalid with respect to ApiMachinePort
  */
  public static ApiMachinePort fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiMachinePort.class);
  }

 /**
  * Convert an instance of ApiMachinePort to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

