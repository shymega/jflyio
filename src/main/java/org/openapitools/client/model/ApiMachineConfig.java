/*
 * Fly Machines API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ApiDNSConfig;
import org.openapitools.client.model.ApiFile;
import org.openapitools.client.model.ApiMachineCheck;
import org.openapitools.client.model.ApiMachineGuest;
import org.openapitools.client.model.ApiMachineInit;
import org.openapitools.client.model.ApiMachineMetrics;
import org.openapitools.client.model.ApiMachineMount;
import org.openapitools.client.model.ApiMachineProcess;
import org.openapitools.client.model.ApiMachineRestart;
import org.openapitools.client.model.ApiMachineService;
import org.openapitools.client.model.ApiStatic;
import org.openapitools.client.model.ApiStopConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiMachineConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-31T17:25:53.139932930Z[Europe/London]")
public class ApiMachineConfig {
  public static final String SERIALIZED_NAME_AUTO_DESTROY = "auto_destroy";
  @SerializedName(SERIALIZED_NAME_AUTO_DESTROY)
  private Boolean autoDestroy;

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private Map<String, ApiMachineCheck> checks = new HashMap<>();

  public static final String SERIALIZED_NAME_DISABLE_MACHINE_AUTOSTART = "disable_machine_autostart";
  @SerializedName(SERIALIZED_NAME_DISABLE_MACHINE_AUTOSTART)
  private Boolean disableMachineAutostart;

  public static final String SERIALIZED_NAME_DNS = "dns";
  @SerializedName(SERIALIZED_NAME_DNS)
  private ApiDNSConfig dns;

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private Map<String, String> env = new HashMap<>();

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<ApiFile> files;

  public static final String SERIALIZED_NAME_GUEST = "guest";
  @SerializedName(SERIALIZED_NAME_GUEST)
  private ApiMachineGuest guest;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_INIT = "init";
  @SerializedName(SERIALIZED_NAME_INIT)
  private ApiMachineInit init;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private ApiMachineMetrics metrics;

  public static final String SERIALIZED_NAME_MOUNTS = "mounts";
  @SerializedName(SERIALIZED_NAME_MOUNTS)
  private List<ApiMachineMount> mounts;

  public static final String SERIALIZED_NAME_PROCESSES = "processes";
  @SerializedName(SERIALIZED_NAME_PROCESSES)
  private List<ApiMachineProcess> processes;

  public static final String SERIALIZED_NAME_RESTART = "restart";
  @SerializedName(SERIALIZED_NAME_RESTART)
  private ApiMachineRestart restart;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private String schedule;

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<ApiMachineService> services;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_STANDBYS = "standbys";
  @SerializedName(SERIALIZED_NAME_STANDBYS)
  private List<String> standbys;

  public static final String SERIALIZED_NAME_STATICS = "statics";
  @SerializedName(SERIALIZED_NAME_STATICS)
  private List<ApiStatic> statics;

  public static final String SERIALIZED_NAME_STOP_CONFIG = "stop_config";
  @SerializedName(SERIALIZED_NAME_STOP_CONFIG)
  private ApiStopConfig stopConfig;

  public ApiMachineConfig() {
  }

  public ApiMachineConfig autoDestroy(Boolean autoDestroy) {
    this.autoDestroy = autoDestroy;
    return this;
  }

   /**
   * Optional boolean telling the Machine to destroy itself once itâ€™s complete (default false)
   * @return autoDestroy
  **/
  @javax.annotation.Nullable
  public Boolean getAutoDestroy() {
    return autoDestroy;
  }

  public void setAutoDestroy(Boolean autoDestroy) {
    this.autoDestroy = autoDestroy;
  }


  public ApiMachineConfig checks(Map<String, ApiMachineCheck> checks) {
    this.checks = checks;
    return this;
  }

  public ApiMachineConfig putChecksItem(String key, ApiMachineCheck checksItem) {
    if (this.checks == null) {
      this.checks = new HashMap<>();
    }
    this.checks.put(key, checksItem);
    return this;
  }

   /**
   * Get checks
   * @return checks
  **/
  @javax.annotation.Nullable
  public Map<String, ApiMachineCheck> getChecks() {
    return checks;
  }

  public void setChecks(Map<String, ApiMachineCheck> checks) {
    this.checks = checks;
  }


  public ApiMachineConfig disableMachineAutostart(Boolean disableMachineAutostart) {
    this.disableMachineAutostart = disableMachineAutostart;
    return this;
  }

   /**
   * Deprecated: use Service.Autostart instead
   * @return disableMachineAutostart
  **/
  @javax.annotation.Nullable
  public Boolean getDisableMachineAutostart() {
    return disableMachineAutostart;
  }

  public void setDisableMachineAutostart(Boolean disableMachineAutostart) {
    this.disableMachineAutostart = disableMachineAutostart;
  }


  public ApiMachineConfig dns(ApiDNSConfig dns) {
    this.dns = dns;
    return this;
  }

   /**
   * Get dns
   * @return dns
  **/
  @javax.annotation.Nullable
  public ApiDNSConfig getDns() {
    return dns;
  }

  public void setDns(ApiDNSConfig dns) {
    this.dns = dns;
  }


  public ApiMachineConfig env(Map<String, String> env) {
    this.env = env;
    return this;
  }

  public ApiMachineConfig putEnvItem(String key, String envItem) {
    if (this.env == null) {
      this.env = new HashMap<>();
    }
    this.env.put(key, envItem);
    return this;
  }

   /**
   * An object filled with key/value pairs to be set as environment variables
   * @return env
  **/
  @javax.annotation.Nullable
  public Map<String, String> getEnv() {
    return env;
  }

  public void setEnv(Map<String, String> env) {
    this.env = env;
  }


  public ApiMachineConfig files(List<ApiFile> files) {
    this.files = files;
    return this;
  }

  public ApiMachineConfig addFilesItem(ApiFile filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @javax.annotation.Nullable
  public List<ApiFile> getFiles() {
    return files;
  }

  public void setFiles(List<ApiFile> files) {
    this.files = files;
  }


  public ApiMachineConfig guest(ApiMachineGuest guest) {
    this.guest = guest;
    return this;
  }

   /**
   * Get guest
   * @return guest
  **/
  @javax.annotation.Nullable
  public ApiMachineGuest getGuest() {
    return guest;
  }

  public void setGuest(ApiMachineGuest guest) {
    this.guest = guest;
  }


  public ApiMachineConfig image(String image) {
    this.image = image;
    return this;
  }

   /**
   * The docker image to run
   * @return image
  **/
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public ApiMachineConfig init(ApiMachineInit init) {
    this.init = init;
    return this;
  }

   /**
   * Get init
   * @return init
  **/
  @javax.annotation.Nullable
  public ApiMachineInit getInit() {
    return init;
  }

  public void setInit(ApiMachineInit init) {
    this.init = init;
  }


  public ApiMachineConfig metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public ApiMachineConfig putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public ApiMachineConfig metrics(ApiMachineMetrics metrics) {
    this.metrics = metrics;
    return this;
  }

   /**
   * Get metrics
   * @return metrics
  **/
  @javax.annotation.Nullable
  public ApiMachineMetrics getMetrics() {
    return metrics;
  }

  public void setMetrics(ApiMachineMetrics metrics) {
    this.metrics = metrics;
  }


  public ApiMachineConfig mounts(List<ApiMachineMount> mounts) {
    this.mounts = mounts;
    return this;
  }

  public ApiMachineConfig addMountsItem(ApiMachineMount mountsItem) {
    if (this.mounts == null) {
      this.mounts = new ArrayList<>();
    }
    this.mounts.add(mountsItem);
    return this;
  }

   /**
   * Get mounts
   * @return mounts
  **/
  @javax.annotation.Nullable
  public List<ApiMachineMount> getMounts() {
    return mounts;
  }

  public void setMounts(List<ApiMachineMount> mounts) {
    this.mounts = mounts;
  }


  public ApiMachineConfig processes(List<ApiMachineProcess> processes) {
    this.processes = processes;
    return this;
  }

  public ApiMachineConfig addProcessesItem(ApiMachineProcess processesItem) {
    if (this.processes == null) {
      this.processes = new ArrayList<>();
    }
    this.processes.add(processesItem);
    return this;
  }

   /**
   * Get processes
   * @return processes
  **/
  @javax.annotation.Nullable
  public List<ApiMachineProcess> getProcesses() {
    return processes;
  }

  public void setProcesses(List<ApiMachineProcess> processes) {
    this.processes = processes;
  }


  public ApiMachineConfig restart(ApiMachineRestart restart) {
    this.restart = restart;
    return this;
  }

   /**
   * Get restart
   * @return restart
  **/
  @javax.annotation.Nullable
  public ApiMachineRestart getRestart() {
    return restart;
  }

  public void setRestart(ApiMachineRestart restart) {
    this.restart = restart;
  }


  public ApiMachineConfig schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Get schedule
   * @return schedule
  **/
  @javax.annotation.Nullable
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }


  public ApiMachineConfig services(List<ApiMachineService> services) {
    this.services = services;
    return this;
  }

  public ApiMachineConfig addServicesItem(ApiMachineService servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

   /**
   * Get services
   * @return services
  **/
  @javax.annotation.Nullable
  public List<ApiMachineService> getServices() {
    return services;
  }

  public void setServices(List<ApiMachineService> services) {
    this.services = services;
  }


  public ApiMachineConfig size(String size) {
    this.size = size;
    return this;
  }

   /**
   * Deprecated: use Guest instead
   * @return size
  **/
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }


  public ApiMachineConfig standbys(List<String> standbys) {
    this.standbys = standbys;
    return this;
  }

  public ApiMachineConfig addStandbysItem(String standbysItem) {
    if (this.standbys == null) {
      this.standbys = new ArrayList<>();
    }
    this.standbys.add(standbysItem);
    return this;
  }

   /**
   * Standbys enable a machine to be a standby for another. In the event of a hardware failure, the standby machine will be started.
   * @return standbys
  **/
  @javax.annotation.Nullable
  public List<String> getStandbys() {
    return standbys;
  }

  public void setStandbys(List<String> standbys) {
    this.standbys = standbys;
  }


  public ApiMachineConfig statics(List<ApiStatic> statics) {
    this.statics = statics;
    return this;
  }

  public ApiMachineConfig addStaticsItem(ApiStatic staticsItem) {
    if (this.statics == null) {
      this.statics = new ArrayList<>();
    }
    this.statics.add(staticsItem);
    return this;
  }

   /**
   * Get statics
   * @return statics
  **/
  @javax.annotation.Nullable
  public List<ApiStatic> getStatics() {
    return statics;
  }

  public void setStatics(List<ApiStatic> statics) {
    this.statics = statics;
  }


  public ApiMachineConfig stopConfig(ApiStopConfig stopConfig) {
    this.stopConfig = stopConfig;
    return this;
  }

   /**
   * Get stopConfig
   * @return stopConfig
  **/
  @javax.annotation.Nullable
  public ApiStopConfig getStopConfig() {
    return stopConfig;
  }

  public void setStopConfig(ApiStopConfig stopConfig) {
    this.stopConfig = stopConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiMachineConfig apiMachineConfig = (ApiMachineConfig) o;
    return Objects.equals(this.autoDestroy, apiMachineConfig.autoDestroy) &&
        Objects.equals(this.checks, apiMachineConfig.checks) &&
        Objects.equals(this.disableMachineAutostart, apiMachineConfig.disableMachineAutostart) &&
        Objects.equals(this.dns, apiMachineConfig.dns) &&
        Objects.equals(this.env, apiMachineConfig.env) &&
        Objects.equals(this.files, apiMachineConfig.files) &&
        Objects.equals(this.guest, apiMachineConfig.guest) &&
        Objects.equals(this.image, apiMachineConfig.image) &&
        Objects.equals(this.init, apiMachineConfig.init) &&
        Objects.equals(this.metadata, apiMachineConfig.metadata) &&
        Objects.equals(this.metrics, apiMachineConfig.metrics) &&
        Objects.equals(this.mounts, apiMachineConfig.mounts) &&
        Objects.equals(this.processes, apiMachineConfig.processes) &&
        Objects.equals(this.restart, apiMachineConfig.restart) &&
        Objects.equals(this.schedule, apiMachineConfig.schedule) &&
        Objects.equals(this.services, apiMachineConfig.services) &&
        Objects.equals(this.size, apiMachineConfig.size) &&
        Objects.equals(this.standbys, apiMachineConfig.standbys) &&
        Objects.equals(this.statics, apiMachineConfig.statics) &&
        Objects.equals(this.stopConfig, apiMachineConfig.stopConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoDestroy, checks, disableMachineAutostart, dns, env, files, guest, image, init, metadata, metrics, mounts, processes, restart, schedule, services, size, standbys, statics, stopConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiMachineConfig {\n");
    sb.append("    autoDestroy: ").append(toIndentedString(autoDestroy)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    disableMachineAutostart: ").append(toIndentedString(disableMachineAutostart)).append("\n");
    sb.append("    dns: ").append(toIndentedString(dns)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    guest: ").append(toIndentedString(guest)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    init: ").append(toIndentedString(init)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    mounts: ").append(toIndentedString(mounts)).append("\n");
    sb.append("    processes: ").append(toIndentedString(processes)).append("\n");
    sb.append("    restart: ").append(toIndentedString(restart)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    standbys: ").append(toIndentedString(standbys)).append("\n");
    sb.append("    statics: ").append(toIndentedString(statics)).append("\n");
    sb.append("    stopConfig: ").append(toIndentedString(stopConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_destroy");
    openapiFields.add("checks");
    openapiFields.add("disable_machine_autostart");
    openapiFields.add("dns");
    openapiFields.add("env");
    openapiFields.add("files");
    openapiFields.add("guest");
    openapiFields.add("image");
    openapiFields.add("init");
    openapiFields.add("metadata");
    openapiFields.add("metrics");
    openapiFields.add("mounts");
    openapiFields.add("processes");
    openapiFields.add("restart");
    openapiFields.add("schedule");
    openapiFields.add("services");
    openapiFields.add("size");
    openapiFields.add("standbys");
    openapiFields.add("statics");
    openapiFields.add("stop_config");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiMachineConfig
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiMachineConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiMachineConfig is not found in the empty JSON string", ApiMachineConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiMachineConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiMachineConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dns`
      if (jsonObj.get("dns") != null && !jsonObj.get("dns").isJsonNull()) {
        ApiDNSConfig.validateJsonElement(jsonObj.get("dns"));
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            ApiFile.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      // validate the optional field `guest`
      if (jsonObj.get("guest") != null && !jsonObj.get("guest").isJsonNull()) {
        ApiMachineGuest.validateJsonElement(jsonObj.get("guest"));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      // validate the optional field `init`
      if (jsonObj.get("init") != null && !jsonObj.get("init").isJsonNull()) {
        ApiMachineInit.validateJsonElement(jsonObj.get("init"));
      }
      // validate the optional field `metrics`
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        ApiMachineMetrics.validateJsonElement(jsonObj.get("metrics"));
      }
      if (jsonObj.get("mounts") != null && !jsonObj.get("mounts").isJsonNull()) {
        JsonArray jsonArraymounts = jsonObj.getAsJsonArray("mounts");
        if (jsonArraymounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mounts` to be an array in the JSON string but got `%s`", jsonObj.get("mounts").toString()));
          }

          // validate the optional field `mounts` (array)
          for (int i = 0; i < jsonArraymounts.size(); i++) {
            ApiMachineMount.validateJsonElement(jsonArraymounts.get(i));
          };
        }
      }
      if (jsonObj.get("processes") != null && !jsonObj.get("processes").isJsonNull()) {
        JsonArray jsonArrayprocesses = jsonObj.getAsJsonArray("processes");
        if (jsonArrayprocesses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("processes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `processes` to be an array in the JSON string but got `%s`", jsonObj.get("processes").toString()));
          }

          // validate the optional field `processes` (array)
          for (int i = 0; i < jsonArrayprocesses.size(); i++) {
            ApiMachineProcess.validateJsonElement(jsonArrayprocesses.get(i));
          };
        }
      }
      // validate the optional field `restart`
      if (jsonObj.get("restart") != null && !jsonObj.get("restart").isJsonNull()) {
        ApiMachineRestart.validateJsonElement(jsonObj.get("restart"));
      }
      if ((jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) && !jsonObj.get("schedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule").toString()));
      }
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        JsonArray jsonArrayservices = jsonObj.getAsJsonArray("services");
        if (jsonArrayservices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
          }

          // validate the optional field `services` (array)
          for (int i = 0; i < jsonArrayservices.size(); i++) {
            ApiMachineService.validateJsonElement(jsonArrayservices.get(i));
          };
        }
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("standbys") != null && !jsonObj.get("standbys").isJsonNull() && !jsonObj.get("standbys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `standbys` to be an array in the JSON string but got `%s`", jsonObj.get("standbys").toString()));
      }
      if (jsonObj.get("statics") != null && !jsonObj.get("statics").isJsonNull()) {
        JsonArray jsonArraystatics = jsonObj.getAsJsonArray("statics");
        if (jsonArraystatics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statics` to be an array in the JSON string but got `%s`", jsonObj.get("statics").toString()));
          }

          // validate the optional field `statics` (array)
          for (int i = 0; i < jsonArraystatics.size(); i++) {
            ApiStatic.validateJsonElement(jsonArraystatics.get(i));
          };
        }
      }
      // validate the optional field `stop_config`
      if (jsonObj.get("stop_config") != null && !jsonObj.get("stop_config").isJsonNull()) {
        ApiStopConfig.validateJsonElement(jsonObj.get("stop_config"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiMachineConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiMachineConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiMachineConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiMachineConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiMachineConfig>() {
           @Override
           public void write(JsonWriter out, ApiMachineConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiMachineConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiMachineConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiMachineConfig
  * @throws IOException if the JSON string is invalid with respect to ApiMachineConfig
  */
  public static ApiMachineConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiMachineConfig.class);
  }

 /**
  * Convert an instance of ApiMachineConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

