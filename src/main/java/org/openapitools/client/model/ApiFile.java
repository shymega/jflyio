/*
 * Fly Machines API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A file that will be written to the Machine. One of RawValue or SecretName must be set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-31T17:25:53.139932930Z[Europe/London]")
public class ApiFile {
  public static final String SERIALIZED_NAME_GUEST_PATH = "guest_path";
  @SerializedName(SERIALIZED_NAME_GUEST_PATH)
  private String guestPath;

  public static final String SERIALIZED_NAME_RAW_VALUE = "raw_value";
  @SerializedName(SERIALIZED_NAME_RAW_VALUE)
  private String rawValue;

  public static final String SERIALIZED_NAME_SECRET_NAME = "secret_name";
  @SerializedName(SERIALIZED_NAME_SECRET_NAME)
  private String secretName;

  public ApiFile() {
  }

  public ApiFile guestPath(String guestPath) {
    this.guestPath = guestPath;
    return this;
  }

   /**
   * GuestPath is the path on the machine where the file will be written and must be an absolute path. For example: /full/path/to/file.json
   * @return guestPath
  **/
  @javax.annotation.Nullable
  public String getGuestPath() {
    return guestPath;
  }

  public void setGuestPath(String guestPath) {
    this.guestPath = guestPath;
  }


  public ApiFile rawValue(String rawValue) {
    this.rawValue = rawValue;
    return this;
  }

   /**
   * The base64 encoded string of the file contents.
   * @return rawValue
  **/
  @javax.annotation.Nullable
  public String getRawValue() {
    return rawValue;
  }

  public void setRawValue(String rawValue) {
    this.rawValue = rawValue;
  }


  public ApiFile secretName(String secretName) {
    this.secretName = secretName;
    return this;
  }

   /**
   * The name of the secret that contains the base64 encoded file contents.
   * @return secretName
  **/
  @javax.annotation.Nullable
  public String getSecretName() {
    return secretName;
  }

  public void setSecretName(String secretName) {
    this.secretName = secretName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiFile apiFile = (ApiFile) o;
    return Objects.equals(this.guestPath, apiFile.guestPath) &&
        Objects.equals(this.rawValue, apiFile.rawValue) &&
        Objects.equals(this.secretName, apiFile.secretName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(guestPath, rawValue, secretName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiFile {\n");
    sb.append("    guestPath: ").append(toIndentedString(guestPath)).append("\n");
    sb.append("    rawValue: ").append(toIndentedString(rawValue)).append("\n");
    sb.append("    secretName: ").append(toIndentedString(secretName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("guest_path");
    openapiFields.add("raw_value");
    openapiFields.add("secret_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiFile
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiFile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiFile is not found in the empty JSON string", ApiFile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiFile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiFile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("guest_path") != null && !jsonObj.get("guest_path").isJsonNull()) && !jsonObj.get("guest_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guest_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guest_path").toString()));
      }
      if ((jsonObj.get("raw_value") != null && !jsonObj.get("raw_value").isJsonNull()) && !jsonObj.get("raw_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw_value").toString()));
      }
      if ((jsonObj.get("secret_name") != null && !jsonObj.get("secret_name").isJsonNull()) && !jsonObj.get("secret_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiFile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiFile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiFile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiFile.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiFile>() {
           @Override
           public void write(JsonWriter out, ApiFile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiFile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiFile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiFile
  * @throws IOException if the JSON string is invalid with respect to ApiFile
  */
  public static ApiFile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiFile.class);
  }

 /**
  * Convert an instance of ApiFile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

