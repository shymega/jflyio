/*
 * Fly Machines API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ListenSocket;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProcessStat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-31T17:25:53.139932930Z[Europe/London]")
public class ProcessStat {
  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private String command;

  public static final String SERIALIZED_NAME_CPU = "cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  private Integer cpu;

  public static final String SERIALIZED_NAME_DIRECTORY = "directory";
  @SerializedName(SERIALIZED_NAME_DIRECTORY)
  private String directory;

  public static final String SERIALIZED_NAME_LISTEN_SOCKETS = "listen_sockets";
  @SerializedName(SERIALIZED_NAME_LISTEN_SOCKETS)
  private List<ListenSocket> listenSockets;

  public static final String SERIALIZED_NAME_PID = "pid";
  @SerializedName(SERIALIZED_NAME_PID)
  private Integer pid;

  public static final String SERIALIZED_NAME_RSS = "rss";
  @SerializedName(SERIALIZED_NAME_RSS)
  private Integer rss;

  public static final String SERIALIZED_NAME_RTIME = "rtime";
  @SerializedName(SERIALIZED_NAME_RTIME)
  private Integer rtime;

  public static final String SERIALIZED_NAME_STIME = "stime";
  @SerializedName(SERIALIZED_NAME_STIME)
  private Integer stime;

  public ProcessStat() {
  }

  public ProcessStat command(String command) {
    this.command = command;
    return this;
  }

   /**
   * Get command
   * @return command
  **/
  @javax.annotation.Nullable
  public String getCommand() {
    return command;
  }

  public void setCommand(String command) {
    this.command = command;
  }


  public ProcessStat cpu(Integer cpu) {
    this.cpu = cpu;
    return this;
  }

   /**
   * Get cpu
   * @return cpu
  **/
  @javax.annotation.Nullable
  public Integer getCpu() {
    return cpu;
  }

  public void setCpu(Integer cpu) {
    this.cpu = cpu;
  }


  public ProcessStat directory(String directory) {
    this.directory = directory;
    return this;
  }

   /**
   * Get directory
   * @return directory
  **/
  @javax.annotation.Nullable
  public String getDirectory() {
    return directory;
  }

  public void setDirectory(String directory) {
    this.directory = directory;
  }


  public ProcessStat listenSockets(List<ListenSocket> listenSockets) {
    this.listenSockets = listenSockets;
    return this;
  }

  public ProcessStat addListenSocketsItem(ListenSocket listenSocketsItem) {
    if (this.listenSockets == null) {
      this.listenSockets = new ArrayList<>();
    }
    this.listenSockets.add(listenSocketsItem);
    return this;
  }

   /**
   * Get listenSockets
   * @return listenSockets
  **/
  @javax.annotation.Nullable
  public List<ListenSocket> getListenSockets() {
    return listenSockets;
  }

  public void setListenSockets(List<ListenSocket> listenSockets) {
    this.listenSockets = listenSockets;
  }


  public ProcessStat pid(Integer pid) {
    this.pid = pid;
    return this;
  }

   /**
   * Get pid
   * @return pid
  **/
  @javax.annotation.Nullable
  public Integer getPid() {
    return pid;
  }

  public void setPid(Integer pid) {
    this.pid = pid;
  }


  public ProcessStat rss(Integer rss) {
    this.rss = rss;
    return this;
  }

   /**
   * Get rss
   * @return rss
  **/
  @javax.annotation.Nullable
  public Integer getRss() {
    return rss;
  }

  public void setRss(Integer rss) {
    this.rss = rss;
  }


  public ProcessStat rtime(Integer rtime) {
    this.rtime = rtime;
    return this;
  }

   /**
   * Get rtime
   * @return rtime
  **/
  @javax.annotation.Nullable
  public Integer getRtime() {
    return rtime;
  }

  public void setRtime(Integer rtime) {
    this.rtime = rtime;
  }


  public ProcessStat stime(Integer stime) {
    this.stime = stime;
    return this;
  }

   /**
   * Get stime
   * @return stime
  **/
  @javax.annotation.Nullable
  public Integer getStime() {
    return stime;
  }

  public void setStime(Integer stime) {
    this.stime = stime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessStat processStat = (ProcessStat) o;
    return Objects.equals(this.command, processStat.command) &&
        Objects.equals(this.cpu, processStat.cpu) &&
        Objects.equals(this.directory, processStat.directory) &&
        Objects.equals(this.listenSockets, processStat.listenSockets) &&
        Objects.equals(this.pid, processStat.pid) &&
        Objects.equals(this.rss, processStat.rss) &&
        Objects.equals(this.rtime, processStat.rtime) &&
        Objects.equals(this.stime, processStat.stime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(command, cpu, directory, listenSockets, pid, rss, rtime, stime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessStat {\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    directory: ").append(toIndentedString(directory)).append("\n");
    sb.append("    listenSockets: ").append(toIndentedString(listenSockets)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    rss: ").append(toIndentedString(rss)).append("\n");
    sb.append("    rtime: ").append(toIndentedString(rtime)).append("\n");
    sb.append("    stime: ").append(toIndentedString(stime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("command");
    openapiFields.add("cpu");
    openapiFields.add("directory");
    openapiFields.add("listen_sockets");
    openapiFields.add("pid");
    openapiFields.add("rss");
    openapiFields.add("rtime");
    openapiFields.add("stime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ProcessStat
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProcessStat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProcessStat is not found in the empty JSON string", ProcessStat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProcessStat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProcessStat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("command") != null && !jsonObj.get("command").isJsonNull()) && !jsonObj.get("command").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `command` to be a primitive type in the JSON string but got `%s`", jsonObj.get("command").toString()));
      }
      if ((jsonObj.get("directory") != null && !jsonObj.get("directory").isJsonNull()) && !jsonObj.get("directory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directory").toString()));
      }
      if (jsonObj.get("listen_sockets") != null && !jsonObj.get("listen_sockets").isJsonNull()) {
        JsonArray jsonArraylistenSockets = jsonObj.getAsJsonArray("listen_sockets");
        if (jsonArraylistenSockets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("listen_sockets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `listen_sockets` to be an array in the JSON string but got `%s`", jsonObj.get("listen_sockets").toString()));
          }

          // validate the optional field `listen_sockets` (array)
          for (int i = 0; i < jsonArraylistenSockets.size(); i++) {
            ListenSocket.validateJsonElement(jsonArraylistenSockets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProcessStat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProcessStat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProcessStat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProcessStat.class));

       return (TypeAdapter<T>) new TypeAdapter<ProcessStat>() {
           @Override
           public void write(JsonWriter out, ProcessStat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProcessStat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProcessStat given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProcessStat
  * @throws IOException if the JSON string is invalid with respect to ProcessStat
  */
  public static ProcessStat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProcessStat.class);
  }

 /**
  * Convert an instance of ProcessStat to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

