/*
 * Fly Machines API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateLeaseRequest;
import org.openapitools.client.model.CreateMachineRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Lease;
import org.openapitools.client.model.Machine;
import org.openapitools.client.model.MachineEvent;
import org.openapitools.client.model.MachineExecRequest;
import org.openapitools.client.model.MachineVersion;
import org.openapitools.client.model.ProcessStat;
import org.openapitools.client.model.SignalRequest;
import org.openapitools.client.model.StopRequest;
import org.openapitools.client.model.UpdateMachineRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MachinesApi
 */
@Disabled
public class MachinesApiTest {

    private final MachinesApi api = new MachinesApi();

    /**
     * “Cordoning” a machine refers to disabling its services, so the proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of machines is started up with services disabled, and when they are all healthy, the services are enabled on the new machines and disabled on the old ones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesCordonTest() throws ApiException {
        String appName = null;
        String machineId = null;
        api.machinesCordon(appName, machineId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesCreateTest() throws ApiException {
        String appName = null;
        CreateMachineRequest request = null;
        Machine response = api.machinesCreate(appName, request);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesCreateLeaseTest() throws ApiException {
        String appName = null;
        String machineId = null;
        CreateLeaseRequest request = null;
        Lease response = api.machinesCreateLease(appName, machineId, request);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesDeleteTest() throws ApiException {
        String appName = null;
        String machineId = null;
        api.machinesDelete(appName, machineId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesDeleteMetadataTest() throws ApiException {
        String appName = null;
        String machineId = null;
        String key = null;
        api.machinesDeleteMetadata(appName, machineId, key);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesExecTest() throws ApiException {
        String appName = null;
        String machineId = null;
        MachineExecRequest request = null;
        String response = api.machinesExec(appName, machineId, request);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesListTest() throws ApiException {
        String appName = null;
        Boolean includeDeleted = null;
        String region = null;
        List<Machine> response = api.machinesList(appName, includeDeleted, region);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesListEventsTest() throws ApiException {
        String appName = null;
        String machineId = null;
        List<MachineEvent> response = api.machinesListEvents(appName, machineId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesListProcessesTest() throws ApiException {
        String appName = null;
        String machineId = null;
        String sortBy = null;
        String order = null;
        List<ProcessStat> response = api.machinesListProcesses(appName, machineId, sortBy, order);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesListVersionsTest() throws ApiException {
        String appName = null;
        String machineId = null;
        List<MachineVersion> response = api.machinesListVersions(appName, machineId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesReleaseLeaseTest() throws ApiException {
        String appName = null;
        String machineId = null;
        api.machinesReleaseLease(appName, machineId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesRestartTest() throws ApiException {
        String appName = null;
        String machineId = null;
        String timeout = null;
        api.machinesRestart(appName, machineId, timeout);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesShowTest() throws ApiException {
        String appName = null;
        String machineId = null;
        Machine response = api.machinesShow(appName, machineId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesShowLeaseTest() throws ApiException {
        String appName = null;
        String machineId = null;
        Lease response = api.machinesShowLease(appName, machineId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesShowMetadataTest() throws ApiException {
        String appName = null;
        String machineId = null;
        Map<String, String> response = api.machinesShowMetadata(appName, machineId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesSignalTest() throws ApiException {
        String appName = null;
        String machineId = null;
        SignalRequest request = null;
        api.machinesSignal(appName, machineId, request);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesStartTest() throws ApiException {
        String appName = null;
        String machineId = null;
        api.machinesStart(appName, machineId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesStopTest() throws ApiException {
        String appName = null;
        String machineId = null;
        StopRequest request = null;
        api.machinesStop(appName, machineId, request);
        // TODO: test validations
    }

    /**
     * “Cordoning” a machine refers to disabling its services, so the proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of machines is started up with services disabled, and when they are all healthy, the services are enabled on the new machines and disabled on the old ones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesUncordonTest() throws ApiException {
        String appName = null;
        String machineId = null;
        api.machinesUncordon(appName, machineId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesUpdateTest() throws ApiException {
        String appName = null;
        String machineId = null;
        UpdateMachineRequest request = null;
        Machine response = api.machinesUpdate(appName, machineId, request);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesUpdateMetadataTest() throws ApiException {
        String appName = null;
        String machineId = null;
        String key = null;
        api.machinesUpdateMetadata(appName, machineId, key);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesWaitTest() throws ApiException {
        String appName = null;
        String machineId = null;
        String instanceId = null;
        Integer timeout = null;
        String state = null;
        api.machinesWait(appName, machineId, instanceId, timeout, state);
        // TODO: test validations
    }

}
