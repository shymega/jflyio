/*
 * Fly Machines API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApiMachineCheck;
import org.openapitools.client.model.ApiMachinePort;
import org.openapitools.client.model.ApiMachineServiceConcurrency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiMachineService
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-31T17:25:53.139932930Z[Europe/London]")
public class ApiMachineService {
  public static final String SERIALIZED_NAME_AUTOSTART = "autostart";
  @SerializedName(SERIALIZED_NAME_AUTOSTART)
  private Boolean autostart;

  public static final String SERIALIZED_NAME_AUTOSTOP = "autostop";
  @SerializedName(SERIALIZED_NAME_AUTOSTOP)
  private Boolean autostop;

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private List<ApiMachineCheck> checks;

  public static final String SERIALIZED_NAME_CONCURRENCY = "concurrency";
  @SerializedName(SERIALIZED_NAME_CONCURRENCY)
  private ApiMachineServiceConcurrency concurrency;

  public static final String SERIALIZED_NAME_FORCE_INSTANCE_DESCRIPTION = "force_instance_description";
  @SerializedName(SERIALIZED_NAME_FORCE_INSTANCE_DESCRIPTION)
  private String forceInstanceDescription;

  public static final String SERIALIZED_NAME_FORCE_INSTANCE_KEY = "force_instance_key";
  @SerializedName(SERIALIZED_NAME_FORCE_INSTANCE_KEY)
  private String forceInstanceKey;

  public static final String SERIALIZED_NAME_INTERNAL_PORT = "internal_port";
  @SerializedName(SERIALIZED_NAME_INTERNAL_PORT)
  private Integer internalPort;

  public static final String SERIALIZED_NAME_MIN_MACHINES_RUNNING = "min_machines_running";
  @SerializedName(SERIALIZED_NAME_MIN_MACHINES_RUNNING)
  private Integer minMachinesRunning;

  public static final String SERIALIZED_NAME_PORTS = "ports";
  @SerializedName(SERIALIZED_NAME_PORTS)
  private List<ApiMachinePort> ports;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public ApiMachineService() {
  }

  public ApiMachineService autostart(Boolean autostart) {
    this.autostart = autostart;
    return this;
  }

   /**
   * Get autostart
   * @return autostart
  **/
  @javax.annotation.Nullable
  public Boolean getAutostart() {
    return autostart;
  }

  public void setAutostart(Boolean autostart) {
    this.autostart = autostart;
  }


  public ApiMachineService autostop(Boolean autostop) {
    this.autostop = autostop;
    return this;
  }

   /**
   * Get autostop
   * @return autostop
  **/
  @javax.annotation.Nullable
  public Boolean getAutostop() {
    return autostop;
  }

  public void setAutostop(Boolean autostop) {
    this.autostop = autostop;
  }


  public ApiMachineService checks(List<ApiMachineCheck> checks) {
    this.checks = checks;
    return this;
  }

  public ApiMachineService addChecksItem(ApiMachineCheck checksItem) {
    if (this.checks == null) {
      this.checks = new ArrayList<>();
    }
    this.checks.add(checksItem);
    return this;
  }

   /**
   * Get checks
   * @return checks
  **/
  @javax.annotation.Nullable
  public List<ApiMachineCheck> getChecks() {
    return checks;
  }

  public void setChecks(List<ApiMachineCheck> checks) {
    this.checks = checks;
  }


  public ApiMachineService concurrency(ApiMachineServiceConcurrency concurrency) {
    this.concurrency = concurrency;
    return this;
  }

   /**
   * Get concurrency
   * @return concurrency
  **/
  @javax.annotation.Nullable
  public ApiMachineServiceConcurrency getConcurrency() {
    return concurrency;
  }

  public void setConcurrency(ApiMachineServiceConcurrency concurrency) {
    this.concurrency = concurrency;
  }


  public ApiMachineService forceInstanceDescription(String forceInstanceDescription) {
    this.forceInstanceDescription = forceInstanceDescription;
    return this;
  }

   /**
   * Get forceInstanceDescription
   * @return forceInstanceDescription
  **/
  @javax.annotation.Nullable
  public String getForceInstanceDescription() {
    return forceInstanceDescription;
  }

  public void setForceInstanceDescription(String forceInstanceDescription) {
    this.forceInstanceDescription = forceInstanceDescription;
  }


  public ApiMachineService forceInstanceKey(String forceInstanceKey) {
    this.forceInstanceKey = forceInstanceKey;
    return this;
  }

   /**
   * Get forceInstanceKey
   * @return forceInstanceKey
  **/
  @javax.annotation.Nullable
  public String getForceInstanceKey() {
    return forceInstanceKey;
  }

  public void setForceInstanceKey(String forceInstanceKey) {
    this.forceInstanceKey = forceInstanceKey;
  }


  public ApiMachineService internalPort(Integer internalPort) {
    this.internalPort = internalPort;
    return this;
  }

   /**
   * Get internalPort
   * @return internalPort
  **/
  @javax.annotation.Nullable
  public Integer getInternalPort() {
    return internalPort;
  }

  public void setInternalPort(Integer internalPort) {
    this.internalPort = internalPort;
  }


  public ApiMachineService minMachinesRunning(Integer minMachinesRunning) {
    this.minMachinesRunning = minMachinesRunning;
    return this;
  }

   /**
   * Get minMachinesRunning
   * @return minMachinesRunning
  **/
  @javax.annotation.Nullable
  public Integer getMinMachinesRunning() {
    return minMachinesRunning;
  }

  public void setMinMachinesRunning(Integer minMachinesRunning) {
    this.minMachinesRunning = minMachinesRunning;
  }


  public ApiMachineService ports(List<ApiMachinePort> ports) {
    this.ports = ports;
    return this;
  }

  public ApiMachineService addPortsItem(ApiMachinePort portsItem) {
    if (this.ports == null) {
      this.ports = new ArrayList<>();
    }
    this.ports.add(portsItem);
    return this;
  }

   /**
   * Get ports
   * @return ports
  **/
  @javax.annotation.Nullable
  public List<ApiMachinePort> getPorts() {
    return ports;
  }

  public void setPorts(List<ApiMachinePort> ports) {
    this.ports = ports;
  }


  public ApiMachineService protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Get protocol
   * @return protocol
  **/
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiMachineService apiMachineService = (ApiMachineService) o;
    return Objects.equals(this.autostart, apiMachineService.autostart) &&
        Objects.equals(this.autostop, apiMachineService.autostop) &&
        Objects.equals(this.checks, apiMachineService.checks) &&
        Objects.equals(this.concurrency, apiMachineService.concurrency) &&
        Objects.equals(this.forceInstanceDescription, apiMachineService.forceInstanceDescription) &&
        Objects.equals(this.forceInstanceKey, apiMachineService.forceInstanceKey) &&
        Objects.equals(this.internalPort, apiMachineService.internalPort) &&
        Objects.equals(this.minMachinesRunning, apiMachineService.minMachinesRunning) &&
        Objects.equals(this.ports, apiMachineService.ports) &&
        Objects.equals(this.protocol, apiMachineService.protocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autostart, autostop, checks, concurrency, forceInstanceDescription, forceInstanceKey, internalPort, minMachinesRunning, ports, protocol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiMachineService {\n");
    sb.append("    autostart: ").append(toIndentedString(autostart)).append("\n");
    sb.append("    autostop: ").append(toIndentedString(autostop)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    concurrency: ").append(toIndentedString(concurrency)).append("\n");
    sb.append("    forceInstanceDescription: ").append(toIndentedString(forceInstanceDescription)).append("\n");
    sb.append("    forceInstanceKey: ").append(toIndentedString(forceInstanceKey)).append("\n");
    sb.append("    internalPort: ").append(toIndentedString(internalPort)).append("\n");
    sb.append("    minMachinesRunning: ").append(toIndentedString(minMachinesRunning)).append("\n");
    sb.append("    ports: ").append(toIndentedString(ports)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autostart");
    openapiFields.add("autostop");
    openapiFields.add("checks");
    openapiFields.add("concurrency");
    openapiFields.add("force_instance_description");
    openapiFields.add("force_instance_key");
    openapiFields.add("internal_port");
    openapiFields.add("min_machines_running");
    openapiFields.add("ports");
    openapiFields.add("protocol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiMachineService
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiMachineService.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiMachineService is not found in the empty JSON string", ApiMachineService.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiMachineService.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiMachineService` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("checks") != null && !jsonObj.get("checks").isJsonNull()) {
        JsonArray jsonArraychecks = jsonObj.getAsJsonArray("checks");
        if (jsonArraychecks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("checks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `checks` to be an array in the JSON string but got `%s`", jsonObj.get("checks").toString()));
          }

          // validate the optional field `checks` (array)
          for (int i = 0; i < jsonArraychecks.size(); i++) {
            ApiMachineCheck.validateJsonElement(jsonArraychecks.get(i));
          };
        }
      }
      // validate the optional field `concurrency`
      if (jsonObj.get("concurrency") != null && !jsonObj.get("concurrency").isJsonNull()) {
        ApiMachineServiceConcurrency.validateJsonElement(jsonObj.get("concurrency"));
      }
      if ((jsonObj.get("force_instance_description") != null && !jsonObj.get("force_instance_description").isJsonNull()) && !jsonObj.get("force_instance_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `force_instance_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("force_instance_description").toString()));
      }
      if ((jsonObj.get("force_instance_key") != null && !jsonObj.get("force_instance_key").isJsonNull()) && !jsonObj.get("force_instance_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `force_instance_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("force_instance_key").toString()));
      }
      if (jsonObj.get("ports") != null && !jsonObj.get("ports").isJsonNull()) {
        JsonArray jsonArrayports = jsonObj.getAsJsonArray("ports");
        if (jsonArrayports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ports` to be an array in the JSON string but got `%s`", jsonObj.get("ports").toString()));
          }

          // validate the optional field `ports` (array)
          for (int i = 0; i < jsonArrayports.size(); i++) {
            ApiMachinePort.validateJsonElement(jsonArrayports.get(i));
          };
        }
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiMachineService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiMachineService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiMachineService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiMachineService.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiMachineService>() {
           @Override
           public void write(JsonWriter out, ApiMachineService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiMachineService read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiMachineService given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiMachineService
  * @throws IOException if the JSON string is invalid with respect to ApiMachineService
  */
  public static ApiMachineService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiMachineService.class);
  }

 /**
  * Convert an instance of ApiMachineService to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

