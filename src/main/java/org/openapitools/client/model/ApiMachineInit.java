/*
 * Fly Machines API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiMachineInit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-31T17:25:53.139932930Z[Europe/London]")
public class ApiMachineInit {
  public static final String SERIALIZED_NAME_CMD = "cmd";
  @SerializedName(SERIALIZED_NAME_CMD)
  private List<String> cmd;

  public static final String SERIALIZED_NAME_ENTRYPOINT = "entrypoint";
  @SerializedName(SERIALIZED_NAME_ENTRYPOINT)
  private List<String> entrypoint;

  public static final String SERIALIZED_NAME_EXEC = "exec";
  @SerializedName(SERIALIZED_NAME_EXEC)
  private List<String> exec;

  public static final String SERIALIZED_NAME_KERNEL_ARGS = "kernel_args";
  @SerializedName(SERIALIZED_NAME_KERNEL_ARGS)
  private List<String> kernelArgs;

  public static final String SERIALIZED_NAME_SWAP_SIZE_MB = "swap_size_mb";
  @SerializedName(SERIALIZED_NAME_SWAP_SIZE_MB)
  private Integer swapSizeMb;

  public static final String SERIALIZED_NAME_TTY = "tty";
  @SerializedName(SERIALIZED_NAME_TTY)
  private Boolean tty;

  public ApiMachineInit() {
  }

  public ApiMachineInit cmd(List<String> cmd) {
    this.cmd = cmd;
    return this;
  }

  public ApiMachineInit addCmdItem(String cmdItem) {
    if (this.cmd == null) {
      this.cmd = new ArrayList<>();
    }
    this.cmd.add(cmdItem);
    return this;
  }

   /**
   * Get cmd
   * @return cmd
  **/
  @javax.annotation.Nullable
  public List<String> getCmd() {
    return cmd;
  }

  public void setCmd(List<String> cmd) {
    this.cmd = cmd;
  }


  public ApiMachineInit entrypoint(List<String> entrypoint) {
    this.entrypoint = entrypoint;
    return this;
  }

  public ApiMachineInit addEntrypointItem(String entrypointItem) {
    if (this.entrypoint == null) {
      this.entrypoint = new ArrayList<>();
    }
    this.entrypoint.add(entrypointItem);
    return this;
  }

   /**
   * Get entrypoint
   * @return entrypoint
  **/
  @javax.annotation.Nullable
  public List<String> getEntrypoint() {
    return entrypoint;
  }

  public void setEntrypoint(List<String> entrypoint) {
    this.entrypoint = entrypoint;
  }


  public ApiMachineInit exec(List<String> exec) {
    this.exec = exec;
    return this;
  }

  public ApiMachineInit addExecItem(String execItem) {
    if (this.exec == null) {
      this.exec = new ArrayList<>();
    }
    this.exec.add(execItem);
    return this;
  }

   /**
   * Get exec
   * @return exec
  **/
  @javax.annotation.Nullable
  public List<String> getExec() {
    return exec;
  }

  public void setExec(List<String> exec) {
    this.exec = exec;
  }


  public ApiMachineInit kernelArgs(List<String> kernelArgs) {
    this.kernelArgs = kernelArgs;
    return this;
  }

  public ApiMachineInit addKernelArgsItem(String kernelArgsItem) {
    if (this.kernelArgs == null) {
      this.kernelArgs = new ArrayList<>();
    }
    this.kernelArgs.add(kernelArgsItem);
    return this;
  }

   /**
   * Get kernelArgs
   * @return kernelArgs
  **/
  @javax.annotation.Nullable
  public List<String> getKernelArgs() {
    return kernelArgs;
  }

  public void setKernelArgs(List<String> kernelArgs) {
    this.kernelArgs = kernelArgs;
  }


  public ApiMachineInit swapSizeMb(Integer swapSizeMb) {
    this.swapSizeMb = swapSizeMb;
    return this;
  }

   /**
   * Get swapSizeMb
   * @return swapSizeMb
  **/
  @javax.annotation.Nullable
  public Integer getSwapSizeMb() {
    return swapSizeMb;
  }

  public void setSwapSizeMb(Integer swapSizeMb) {
    this.swapSizeMb = swapSizeMb;
  }


  public ApiMachineInit tty(Boolean tty) {
    this.tty = tty;
    return this;
  }

   /**
   * Get tty
   * @return tty
  **/
  @javax.annotation.Nullable
  public Boolean getTty() {
    return tty;
  }

  public void setTty(Boolean tty) {
    this.tty = tty;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiMachineInit apiMachineInit = (ApiMachineInit) o;
    return Objects.equals(this.cmd, apiMachineInit.cmd) &&
        Objects.equals(this.entrypoint, apiMachineInit.entrypoint) &&
        Objects.equals(this.exec, apiMachineInit.exec) &&
        Objects.equals(this.kernelArgs, apiMachineInit.kernelArgs) &&
        Objects.equals(this.swapSizeMb, apiMachineInit.swapSizeMb) &&
        Objects.equals(this.tty, apiMachineInit.tty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cmd, entrypoint, exec, kernelArgs, swapSizeMb, tty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiMachineInit {\n");
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    entrypoint: ").append(toIndentedString(entrypoint)).append("\n");
    sb.append("    exec: ").append(toIndentedString(exec)).append("\n");
    sb.append("    kernelArgs: ").append(toIndentedString(kernelArgs)).append("\n");
    sb.append("    swapSizeMb: ").append(toIndentedString(swapSizeMb)).append("\n");
    sb.append("    tty: ").append(toIndentedString(tty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cmd");
    openapiFields.add("entrypoint");
    openapiFields.add("exec");
    openapiFields.add("kernel_args");
    openapiFields.add("swap_size_mb");
    openapiFields.add("tty");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiMachineInit
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiMachineInit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiMachineInit is not found in the empty JSON string", ApiMachineInit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiMachineInit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiMachineInit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("cmd") != null && !jsonObj.get("cmd").isJsonNull() && !jsonObj.get("cmd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cmd` to be an array in the JSON string but got `%s`", jsonObj.get("cmd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("entrypoint") != null && !jsonObj.get("entrypoint").isJsonNull() && !jsonObj.get("entrypoint").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entrypoint` to be an array in the JSON string but got `%s`", jsonObj.get("entrypoint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exec") != null && !jsonObj.get("exec").isJsonNull() && !jsonObj.get("exec").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exec` to be an array in the JSON string but got `%s`", jsonObj.get("exec").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("kernel_args") != null && !jsonObj.get("kernel_args").isJsonNull() && !jsonObj.get("kernel_args").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `kernel_args` to be an array in the JSON string but got `%s`", jsonObj.get("kernel_args").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiMachineInit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiMachineInit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiMachineInit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiMachineInit.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiMachineInit>() {
           @Override
           public void write(JsonWriter out, ApiMachineInit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiMachineInit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiMachineInit given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiMachineInit
  * @throws IOException if the JSON string is invalid with respect to ApiMachineInit
  */
  public static ApiMachineInit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiMachineInit.class);
  }

 /**
  * Convert an instance of ApiMachineInit to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

