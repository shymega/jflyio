/*
 * Fly Machines API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApiMachineHTTPHeader;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An optional object that defines one or more named checks. The key for each check is the check name.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-31T17:25:53.139932930Z[Europe/London]")
public class ApiMachineCheck {
  public static final String SERIALIZED_NAME_GRACE_PERIOD = "grace_period";
  @SerializedName(SERIALIZED_NAME_GRACE_PERIOD)
  private String gracePeriod;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List<ApiMachineHTTPHeader> headers;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public static final String SERIALIZED_NAME_TLS_SERVER_NAME = "tls_server_name";
  @SerializedName(SERIALIZED_NAME_TLS_SERVER_NAME)
  private String tlsServerName;

  public static final String SERIALIZED_NAME_TLS_SKIP_VERIFY = "tls_skip_verify";
  @SerializedName(SERIALIZED_NAME_TLS_SKIP_VERIFY)
  private Boolean tlsSkipVerify;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ApiMachineCheck() {
  }

  public ApiMachineCheck gracePeriod(String gracePeriod) {
    this.gracePeriod = gracePeriod;
    return this;
  }

   /**
   * The time to wait after a VM starts before checking its health
   * @return gracePeriod
  **/
  @javax.annotation.Nullable
  public String getGracePeriod() {
    return gracePeriod;
  }

  public void setGracePeriod(String gracePeriod) {
    this.gracePeriod = gracePeriod;
  }


  public ApiMachineCheck headers(List<ApiMachineHTTPHeader> headers) {
    this.headers = headers;
    return this;
  }

  public ApiMachineCheck addHeadersItem(ApiMachineHTTPHeader headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

   /**
   * Get headers
   * @return headers
  **/
  @javax.annotation.Nullable
  public List<ApiMachineHTTPHeader> getHeaders() {
    return headers;
  }

  public void setHeaders(List<ApiMachineHTTPHeader> headers) {
    this.headers = headers;
  }


  public ApiMachineCheck interval(String interval) {
    this.interval = interval;
    return this;
  }

   /**
   * The time between connectivity checks
   * @return interval
  **/
  @javax.annotation.Nullable
  public String getInterval() {
    return interval;
  }

  public void setInterval(String interval) {
    this.interval = interval;
  }


  public ApiMachineCheck method(String method) {
    this.method = method;
    return this;
  }

   /**
   * For http checks, the HTTP method to use to when making the request
   * @return method
  **/
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public ApiMachineCheck path(String path) {
    this.path = path;
    return this;
  }

   /**
   * For http checks, the path to send the request to
   * @return path
  **/
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ApiMachineCheck port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * The port to connect to, often the same as internal_port
   * @return port
  **/
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public ApiMachineCheck protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * For http checks, whether to use http or https
   * @return protocol
  **/
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public ApiMachineCheck timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * The maximum time a connection can take before being reported as failing its health check
   * @return timeout
  **/
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }


  public ApiMachineCheck tlsServerName(String tlsServerName) {
    this.tlsServerName = tlsServerName;
    return this;
  }

   /**
   * If the protocol is https, the hostname to use for TLS certificate validation
   * @return tlsServerName
  **/
  @javax.annotation.Nullable
  public String getTlsServerName() {
    return tlsServerName;
  }

  public void setTlsServerName(String tlsServerName) {
    this.tlsServerName = tlsServerName;
  }


  public ApiMachineCheck tlsSkipVerify(Boolean tlsSkipVerify) {
    this.tlsSkipVerify = tlsSkipVerify;
    return this;
  }

   /**
   * For http checks with https protocol, whether or not to verify the TLS certificate
   * @return tlsSkipVerify
  **/
  @javax.annotation.Nullable
  public Boolean getTlsSkipVerify() {
    return tlsSkipVerify;
  }

  public void setTlsSkipVerify(Boolean tlsSkipVerify) {
    this.tlsSkipVerify = tlsSkipVerify;
  }


  public ApiMachineCheck type(String type) {
    this.type = type;
    return this;
  }

   /**
   * tcp or http
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiMachineCheck apiMachineCheck = (ApiMachineCheck) o;
    return Objects.equals(this.gracePeriod, apiMachineCheck.gracePeriod) &&
        Objects.equals(this.headers, apiMachineCheck.headers) &&
        Objects.equals(this.interval, apiMachineCheck.interval) &&
        Objects.equals(this.method, apiMachineCheck.method) &&
        Objects.equals(this.path, apiMachineCheck.path) &&
        Objects.equals(this.port, apiMachineCheck.port) &&
        Objects.equals(this.protocol, apiMachineCheck.protocol) &&
        Objects.equals(this.timeout, apiMachineCheck.timeout) &&
        Objects.equals(this.tlsServerName, apiMachineCheck.tlsServerName) &&
        Objects.equals(this.tlsSkipVerify, apiMachineCheck.tlsSkipVerify) &&
        Objects.equals(this.type, apiMachineCheck.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gracePeriod, headers, interval, method, path, port, protocol, timeout, tlsServerName, tlsSkipVerify, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiMachineCheck {\n");
    sb.append("    gracePeriod: ").append(toIndentedString(gracePeriod)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    tlsServerName: ").append(toIndentedString(tlsServerName)).append("\n");
    sb.append("    tlsSkipVerify: ").append(toIndentedString(tlsSkipVerify)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("grace_period");
    openapiFields.add("headers");
    openapiFields.add("interval");
    openapiFields.add("method");
    openapiFields.add("path");
    openapiFields.add("port");
    openapiFields.add("protocol");
    openapiFields.add("timeout");
    openapiFields.add("tls_server_name");
    openapiFields.add("tls_skip_verify");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiMachineCheck
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiMachineCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiMachineCheck is not found in the empty JSON string", ApiMachineCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiMachineCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiMachineCheck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("grace_period") != null && !jsonObj.get("grace_period").isJsonNull()) && !jsonObj.get("grace_period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grace_period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grace_period").toString()));
      }
      if (jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull()) {
        JsonArray jsonArrayheaders = jsonObj.getAsJsonArray("headers");
        if (jsonArrayheaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `headers` to be an array in the JSON string but got `%s`", jsonObj.get("headers").toString()));
          }

          // validate the optional field `headers` (array)
          for (int i = 0; i < jsonArrayheaders.size(); i++) {
            ApiMachineHTTPHeader.validateJsonElement(jsonArrayheaders.get(i));
          };
        }
      }
      if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) && !jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
      if ((jsonObj.get("tls_server_name") != null && !jsonObj.get("tls_server_name").isJsonNull()) && !jsonObj.get("tls_server_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tls_server_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tls_server_name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiMachineCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiMachineCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiMachineCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiMachineCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiMachineCheck>() {
           @Override
           public void write(JsonWriter out, ApiMachineCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiMachineCheck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiMachineCheck given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiMachineCheck
  * @throws IOException if the JSON string is invalid with respect to ApiMachineCheck
  */
  public static ApiMachineCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiMachineCheck.class);
  }

 /**
  * Convert an instance of ApiMachineCheck to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

