/*
 * Fly Machines API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Volume
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-31T17:25:53.139932930Z[Europe/London]")
public class Volume {
  public static final String SERIALIZED_NAME_ATTACHED_ALLOC_ID = "attached_alloc_id";
  @SerializedName(SERIALIZED_NAME_ATTACHED_ALLOC_ID)
  private String attachedAllocId;

  public static final String SERIALIZED_NAME_ATTACHED_MACHINE_ID = "attached_machine_id";
  @SerializedName(SERIALIZED_NAME_ATTACHED_MACHINE_ID)
  private String attachedMachineId;

  public static final String SERIALIZED_NAME_BLOCK_SIZE = "block_size";
  @SerializedName(SERIALIZED_NAME_BLOCK_SIZE)
  private Integer blockSize;

  public static final String SERIALIZED_NAME_BLOCKS = "blocks";
  @SerializedName(SERIALIZED_NAME_BLOCKS)
  private Integer blocks;

  public static final String SERIALIZED_NAME_BLOCKS_AVAIL = "blocks_avail";
  @SerializedName(SERIALIZED_NAME_BLOCKS_AVAIL)
  private Integer blocksAvail;

  public static final String SERIALIZED_NAME_BLOCKS_FREE = "blocks_free";
  @SerializedName(SERIALIZED_NAME_BLOCKS_FREE)
  private Integer blocksFree;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_ENCRYPTED = "encrypted";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED)
  private Boolean encrypted;

  public static final String SERIALIZED_NAME_FSTYPE = "fstype";
  @SerializedName(SERIALIZED_NAME_FSTYPE)
  private String fstype;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_SIZE_GB = "size_gb";
  @SerializedName(SERIALIZED_NAME_SIZE_GB)
  private Integer sizeGb;

  public static final String SERIALIZED_NAME_SNAPSHOT_RETENTION = "snapshot_retention";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_RETENTION)
  private Integer snapshotRetention;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public Volume() {
  }

  public Volume attachedAllocId(String attachedAllocId) {
    this.attachedAllocId = attachedAllocId;
    return this;
  }

   /**
   * Get attachedAllocId
   * @return attachedAllocId
  **/
  @javax.annotation.Nullable
  public String getAttachedAllocId() {
    return attachedAllocId;
  }

  public void setAttachedAllocId(String attachedAllocId) {
    this.attachedAllocId = attachedAllocId;
  }


  public Volume attachedMachineId(String attachedMachineId) {
    this.attachedMachineId = attachedMachineId;
    return this;
  }

   /**
   * Get attachedMachineId
   * @return attachedMachineId
  **/
  @javax.annotation.Nullable
  public String getAttachedMachineId() {
    return attachedMachineId;
  }

  public void setAttachedMachineId(String attachedMachineId) {
    this.attachedMachineId = attachedMachineId;
  }


  public Volume blockSize(Integer blockSize) {
    this.blockSize = blockSize;
    return this;
  }

   /**
   * Get blockSize
   * @return blockSize
  **/
  @javax.annotation.Nullable
  public Integer getBlockSize() {
    return blockSize;
  }

  public void setBlockSize(Integer blockSize) {
    this.blockSize = blockSize;
  }


  public Volume blocks(Integer blocks) {
    this.blocks = blocks;
    return this;
  }

   /**
   * Get blocks
   * @return blocks
  **/
  @javax.annotation.Nullable
  public Integer getBlocks() {
    return blocks;
  }

  public void setBlocks(Integer blocks) {
    this.blocks = blocks;
  }


  public Volume blocksAvail(Integer blocksAvail) {
    this.blocksAvail = blocksAvail;
    return this;
  }

   /**
   * Get blocksAvail
   * @return blocksAvail
  **/
  @javax.annotation.Nullable
  public Integer getBlocksAvail() {
    return blocksAvail;
  }

  public void setBlocksAvail(Integer blocksAvail) {
    this.blocksAvail = blocksAvail;
  }


  public Volume blocksFree(Integer blocksFree) {
    this.blocksFree = blocksFree;
    return this;
  }

   /**
   * Get blocksFree
   * @return blocksFree
  **/
  @javax.annotation.Nullable
  public Integer getBlocksFree() {
    return blocksFree;
  }

  public void setBlocksFree(Integer blocksFree) {
    this.blocksFree = blocksFree;
  }


  public Volume createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Volume encrypted(Boolean encrypted) {
    this.encrypted = encrypted;
    return this;
  }

   /**
   * Get encrypted
   * @return encrypted
  **/
  @javax.annotation.Nullable
  public Boolean getEncrypted() {
    return encrypted;
  }

  public void setEncrypted(Boolean encrypted) {
    this.encrypted = encrypted;
  }


  public Volume fstype(String fstype) {
    this.fstype = fstype;
    return this;
  }

   /**
   * Get fstype
   * @return fstype
  **/
  @javax.annotation.Nullable
  public String getFstype() {
    return fstype;
  }

  public void setFstype(String fstype) {
    this.fstype = fstype;
  }


  public Volume id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Volume name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Volume region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public Volume sizeGb(Integer sizeGb) {
    this.sizeGb = sizeGb;
    return this;
  }

   /**
   * Get sizeGb
   * @return sizeGb
  **/
  @javax.annotation.Nullable
  public Integer getSizeGb() {
    return sizeGb;
  }

  public void setSizeGb(Integer sizeGb) {
    this.sizeGb = sizeGb;
  }


  public Volume snapshotRetention(Integer snapshotRetention) {
    this.snapshotRetention = snapshotRetention;
    return this;
  }

   /**
   * Get snapshotRetention
   * @return snapshotRetention
  **/
  @javax.annotation.Nullable
  public Integer getSnapshotRetention() {
    return snapshotRetention;
  }

  public void setSnapshotRetention(Integer snapshotRetention) {
    this.snapshotRetention = snapshotRetention;
  }


  public Volume state(String state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Volume zone(String zone) {
    this.zone = zone;
    return this;
  }

   /**
   * Get zone
   * @return zone
  **/
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Volume volume = (Volume) o;
    return Objects.equals(this.attachedAllocId, volume.attachedAllocId) &&
        Objects.equals(this.attachedMachineId, volume.attachedMachineId) &&
        Objects.equals(this.blockSize, volume.blockSize) &&
        Objects.equals(this.blocks, volume.blocks) &&
        Objects.equals(this.blocksAvail, volume.blocksAvail) &&
        Objects.equals(this.blocksFree, volume.blocksFree) &&
        Objects.equals(this.createdAt, volume.createdAt) &&
        Objects.equals(this.encrypted, volume.encrypted) &&
        Objects.equals(this.fstype, volume.fstype) &&
        Objects.equals(this.id, volume.id) &&
        Objects.equals(this.name, volume.name) &&
        Objects.equals(this.region, volume.region) &&
        Objects.equals(this.sizeGb, volume.sizeGb) &&
        Objects.equals(this.snapshotRetention, volume.snapshotRetention) &&
        Objects.equals(this.state, volume.state) &&
        Objects.equals(this.zone, volume.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachedAllocId, attachedMachineId, blockSize, blocks, blocksAvail, blocksFree, createdAt, encrypted, fstype, id, name, region, sizeGb, snapshotRetention, state, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Volume {\n");
    sb.append("    attachedAllocId: ").append(toIndentedString(attachedAllocId)).append("\n");
    sb.append("    attachedMachineId: ").append(toIndentedString(attachedMachineId)).append("\n");
    sb.append("    blockSize: ").append(toIndentedString(blockSize)).append("\n");
    sb.append("    blocks: ").append(toIndentedString(blocks)).append("\n");
    sb.append("    blocksAvail: ").append(toIndentedString(blocksAvail)).append("\n");
    sb.append("    blocksFree: ").append(toIndentedString(blocksFree)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    encrypted: ").append(toIndentedString(encrypted)).append("\n");
    sb.append("    fstype: ").append(toIndentedString(fstype)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    sizeGb: ").append(toIndentedString(sizeGb)).append("\n");
    sb.append("    snapshotRetention: ").append(toIndentedString(snapshotRetention)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attached_alloc_id");
    openapiFields.add("attached_machine_id");
    openapiFields.add("block_size");
    openapiFields.add("blocks");
    openapiFields.add("blocks_avail");
    openapiFields.add("blocks_free");
    openapiFields.add("created_at");
    openapiFields.add("encrypted");
    openapiFields.add("fstype");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("region");
    openapiFields.add("size_gb");
    openapiFields.add("snapshot_retention");
    openapiFields.add("state");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Volume
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Volume.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Volume is not found in the empty JSON string", Volume.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Volume.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Volume` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attached_alloc_id") != null && !jsonObj.get("attached_alloc_id").isJsonNull()) && !jsonObj.get("attached_alloc_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attached_alloc_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attached_alloc_id").toString()));
      }
      if ((jsonObj.get("attached_machine_id") != null && !jsonObj.get("attached_machine_id").isJsonNull()) && !jsonObj.get("attached_machine_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attached_machine_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attached_machine_id").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("fstype") != null && !jsonObj.get("fstype").isJsonNull()) && !jsonObj.get("fstype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fstype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fstype").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Volume.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Volume' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Volume> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Volume.class));

       return (TypeAdapter<T>) new TypeAdapter<Volume>() {
           @Override
           public void write(JsonWriter out, Volume value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Volume read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Volume given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Volume
  * @throws IOException if the JSON string is invalid with respect to Volume
  */
  public static Volume fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Volume.class);
  }

 /**
  * Convert an instance of Volume to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

